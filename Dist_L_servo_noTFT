/***************************************************/
/* 

This code was finally used with one Arduino UNO.
tested 15/11/2017
It includes:
1) Ultrasonic distance sensor 
2) Light sensor (voltage divider with LDR)
3) Servo motor
4) Output for lights
5) Warning light
6) button which control a RC to run or stop the motor of a train

*/

// include libraries for distance sensor and servo motor
#include "SPI.h"
#include <Servo.h> 
#include <NewPing.h>


#define TRIGGER_PIN  12  // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN     13  // Arduino pin tied to echo pin on the ultrasonic sensor.
#define MAX_DISTANCE 200 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500 runTime 0 //Keeps time to refresh the TFT.
#define warnLight 8 //warning light pin
#define inPin  11       // the number of the input pin for button
#define outPin 17       // the number of the output pin for RC
#define led 10 //Village lights control pin
#define sensorPin A2 //Light sensor

//δημιουργα αντικειμενων
//Objects

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
Servo myservo;  // create servo object to control a servo 

int sensorValue = 0;  // variable to store the value coming from the light sensor
int pos = 0;    // variable to store the servo position 

//variables to keep the safety bar in "up" or "down" position
boolean up = true;
boolean down = false; 

int state = LOW;      // the current state of the output (RC) pin
int reading;           // the current reading from the input (button) pin
int previous = LOW;    // the previous reading from the input (button) pin

// the follow variables are long's because the time, measured in miliseconds,
// will quickly become a bigger number than can be stored in an int.
long time = 0;         // the last time the output pin was toggled
long debounce = 200;   // the debounce time, increase if the output flickers


void setup() {

  myservo.attach(9);  // attaches the servo on pin 9 to the servo object  
  // initialize the digital pin as an output.
  pinMode(led, OUTPUT); 
  pinMode(inPin, INPUT_PULLUP);
  pinMode(outPin, OUTPUT);
  digitalWrite(warnLight, LOW);

  Serial.begin(9600); 

}


void loop(void) {
  
    // Lights code φωτα οικισμου
  // ************************************************//
  sensorValue = analogRead(sensorPin); 
   if (sensorValue > 500) {
    digitalWrite(led, HIGH);
    //Serial.println(digitalRead(led));
  } 
  else {
    digitalWrite(led,LOW); 
    //Serial.println(digitalRead(led));
  }
  
 
  
 //****************************************************//   
  // Μετρηση αποστασης και ελεγχος συστηματος ασφαλειας
  //*************************************************//
  int dist = sonar.ping_cm();
  //Serial.println(dist);
  
 // Serial.print(digitalRead(warnLight));
 
  //Μπαρα ανοιχτη, τρενο πλησιαζει κατεβασμα μπαρας
  if (dist<25 && up == true){
    up = false;
    down = true;
  //Serial.println("dist<27");  
 
  //κωδικας για να αναψουν τα φωτα προειδοποιησης
    digitalWrite(warnLight, HIGH);   // turn on warning lights
//    Serial.println("on");  
    // κατεβασμα μπαρας ασφαλειας - safety bar down
  for(pos = 05; pos < 75; pos += 1)  // goes from 0 degrees to 180 degrees 
  {                                  // in steps of 1 degree 
    myservo.write(pos);              // tell servo to go to position in variable 'pos' 
    delay(15);                       // waits 15ms for the servo to reach the position 
  } 
  
  }
  //Μπαρα κατω, τρενο περασε, ανεβασμα μπαρας
  else if (dist>=27 && down==true) {
  
  digitalWrite(warnLight, LOW); //σβησιμο προειδοποιητικων φωτων - turn off warning ligths
  
  for(pos = 75; pos>=05; pos-=1)    
  {                                
    myservo.write(pos);              // tell servo to go to position in variable 'pos' 
    delay(15);                       // waits 15ms for the servo to reach the position 
  } 
  
  up = true;
  down = false;
  
}

  delay(50);                     // Wait 50ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
 
 //for debugging
 
  Serial.print("Distance: ");
  Serial.print(sonar.ping_cm()); // Send ping, get distance in cm and print result (0 = outside set distance range)
  Serial.println("cm");

//κωδικας για το button debounce

reading =! digitalRead(inPin);

  // if the input just went from LOW and HIGH and we've waited long enough
  // to ignore any noise on the circuit, toggle the output pin and remember
  // the time
  if (reading == HIGH && previous == LOW && millis() - time > debounce) {
    if (state == HIGH)
      state = LOW;
    else
      state = HIGH;

    time = millis();    
  }

  digitalWrite(outPin, state);

  previous = reading;
  }


